-- this script's version is "1.3"
-- a part of this script's functions is required "rikky_module" whose version is over 1.3

-----------------------------------------------------
@図形関数設定(必須)
-----------------------------------------------------
--track0:Affect%,0,100,100,0.01
--track1:AprType,0,2,0,1
--track2:Refl(rikky),0,1,0,1
--track3:Mtrl(type),0,5,0,1
--dialog:DelayTrackT/chk,local isUseDTT=0;DTT添え字,local dttStr="T";DTTトラック[1-4],local dttUseNum=1;maplayer,local maplayer="0";↑effect追加/chk,local isEffectMaplayer=1;$map,local mapfile="";
--check0:非表示,0
log = function(s) if(obj.getinfo("saving")==false) then debug_print(s) end end
local iserror=false

local mapeffect = isEffectMaplayer==1 and true or false
--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- search rikky_module
-- rikkyさんの「rikky_moduleの使い方.txt」より引用。
if rikky_module == nil then
	local CPATH = {}
	local cpath = package.cpath .. ";"
	local n
	while(1)do
		n = cpath:find(";")
		if n then
			CPATH[#CPATH + 1] = cpath:sub(1, n - 1)
			cpath = cpath:sub(n + 1, #cpath)
		else
			break
		end
	end
	if not CPATH[2]:find("script\\?.dll") then
		CPATH[3]=CPATH[2]:sub(1, CPATH[2]:find("\\script\\")) .. "script\\?.dll"
		package.cpath = package.cpath .. ";" .. CPATH[3]
	end
	for i=1,#CPATH do
		local f=io.open(CPATH[i]:gsub("?", "rikky_module"),"rb")
		if f then
			require("rikky_module")
			f:close()
			break
		end
	end
end
------------------------------------------

local isExistRikkymodule = (rikky_module) and true or false
local rikkymoduleImageStringID = "TDO"
if(rikky_module) then
	rikky_module.file(6,"map")
end
--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||-- delaytrack
local af,aftype,i,ismapfigure
ismapfigure = false
isUseDTT = isUseDTT or 0
if(isUseDTT==1) and (DT) then
	if(type(DT[dttStr])=="table") then
		af = {}
		for i=1,#DT[dttStr] do
			table.insert(af,math.abs(DT[dttStr][i][dttUseNum])/100)
		end
		af["delay"] = dttDelayNum
		aftype = "delaytrack"
	else
		obj.setfont("メイリオ",40)
		obj.load("3Dobject:\n「DTT添え」字で該当するDelayTrackT\nのtableが存在しませんでした。\n添え字を再度確認してください。")
		log("error: not found table'DT'. at layer"..obj.layer)
		af = obj.track0/100
		aftype = "default"
	end
elseif(isUseDTT==1) and (type(DT)~="table") then
	obj.setfont("メイリオ",40)
	obj.load("3Dobject:\nDelayTrackTを使用するには、以下のスクリプト類が設定される必要があります。:\n93 :\t\tDelayMove -> DelayTrackT;")
	log("error: not found table'DT'. at layer"..obj.layer)
	af = obj.track0 and obj.track0/100 or 1
	aftype = "default"
else
	af = obj.track0 and obj.track0/100 or 1
	aftype = "default"
end
--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||-- material
if(maplayer) and (maplayer~="0") then
	if(type(tonumber(maplayer))=="number") then
		obj.load("layer",tonumber(maplayer),mapeffect)
	end
elseif(mapfile) and (mapfile~="") and (isEffectMaplayer==1) then
	if(io.file_exists(mapfile)) then
		obj.load("image",mapfile)
	else
		obj.setfont("メイリオ",40)
		obj.load("3Dobject:\nmapのパスが存在しません。:\nfilepath:"..mapfile..";")
		log("error: not found image'"..mapfile.."'. at layer"..obj.layer)
	end
elseif(mapeffect==0) then
	ismapfigure = true
end

if(rikky_module) then
	rikky_module.image("c",rikkymoduleImageStringID.."."..obj.layer..":map")
	rikky_module.image("w",rikkymoduleImageStringID.."."..obj.layer..":map")
else
	obj.copybuffer("cache:"..rikkymoduleImageStringID.."."..obj.layer..":map","obj")
end


----------------------------------------------------------------------
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
mesh={
	Af 						= af 								, --[number]	0-100
	AfType 					= aftype 							, --[string]	"default" / "delaytrack"
	AppearType 				= obj.track1 or 0 					, --[number]	0-2
	isReflection 			= obj.track2 or 0	 				, --[number]	0-1
	meshSetupLayer 			= obj.layer 						, --[number]	0-100
	isMapUsingRikkymodule 	= (rikky_module) and true or false 	, --[boolean] 	true / false
	imageStringId 			= rikkymoduleImageStringID 			, --[string]	default to "TDO"
	materialType 			= obj.track3 or 1 					, --[number]	0-3
	isUsingMapFigure 		= ismapfigure 						, --[boolean]	true / false
	iserror					= iserror							, --[boolean]	true / false

--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||--
	Rect = function(col,coor,uv)
--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||--
		if not mesh.iserror then
			local x0,y0,z0,x1,y1,z1,x2,y2,z2,x3,y3,z3=unpack(coor)
			local u0,v0,u1,v1,u2,v2,u3,v3
			if type(uv)=="table" and #uv==8 then
				u0,v0,u1,v1,u2,v2,u3,v3=unpack(uv)
			else
				u0,v0,u1,v1,u2,v2,u3,v3=false,false,false,false,false,false,false,false
			end
			-- log("u0:"..tostring(u0).."; v0:"..tostring(v0)..";")

			if(col==true) then
				if(mesh.isUsingMapFigure) or 
						((
							((u0) and (u1) and (u2) and (u3))
							and
							((v0) and (v1) and (v2) and (v3))
						)==false)
				then
					-- log("run")
					-- log("isUsingMapFigure: "..tostring(mesh.isUsingMapFigure))
					local w,h=obj.getpixel()
					local color,a=obj.getpixel(w/2,h/2)
					col = color
					w,h,color,a=nil,nil,nil,nil
					obj.load("figure","四角形",col,1)
					u0,v0 = -1,-1
					u2,v2 = 1,1
					u1,v1 = u2,v0
					u3,v3 = u0,v2
				-- else
				-- 	if(mesh.isMapUsingRikkymodule) and (rikky_module) then
				-- 		rikky_module.image("r",mesh.imageStringId.."."..mesh.meshSetupLayer..":map")
				-- 		rikky_module.image("c",mesh.imageStringId.."."..mesh.meshSetupLayer..":map")
				-- 	else
				-- 		obj.copybuffer("obj","cache:"..mesh.imageStringId.."."..mesh.meshSetupLayer..":map")
				-- 	end
				end
			end
			if(mesh.isReflection==1) then
				if TDO and TDO["materials"] and TDO["materials"][obj.layer] and rikky_module then
					local material = rikky_module.materialdrawEx(TDO["materials"][obj.layer]) 
					material:drawpoly(
						x0,y0,z0,
						x1,y1,z1,
						x2,y2,z2,
						x3,y3,z3,
						u0,v0,
						u1,v1,
						u2,v2,
						u3,v3
					)
				elseif type(rikky_module)~="table" then
					obj.setfont("メイリオ",60)
					log("error: not found table'rikky_module'. at layer"..obj.layer)
					obj.load("3Dobject:\n反射(rikky)を使用するには、以下のスクリプト類が設定される必要があります。:\nrikky :\t\trikky_module;")
					mesh.iserror = true
				else
					obj.setfont("メイリオ",60)
					log("error: not found table 'TDO' . at layer"..obj.layer)
					obj.load("3Dobject:\n光源が設定されていません\nこのオブジェクトのレイヤーより上に光源を設定してください")
					mesh.iserror = true
				end
			else
				-- log("success")
				obj.drawpoly(
					x0,y0,z0,
					x1,y1,z1,
					x2,y2,z2,
					x3,y3,z3,
					u0,v0,
					u1,v1,
					u2,v2,
					u3,v3
				)
			end
		end
	end,

--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||--
	Tri = function(col,coor,uv)
--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||--
		if not mesh.iserror then
			local x0,y0,z0,x1,y1,z1,x2,y2,z2=unpack(coor)
			local u0,v0,u1,v1,u2,v2,u3,v3
			if type(uv)=="table" and #uv==8 then
				u0,v0,u1,v1,u2,v2,u3,v3=unpack(uv)
			else
				u0,v0,u1,v1,u2,v2,u3,v3=false,false,false,false,false,false,false,false
			end
			if(col==true) then
				if(mesh.isUsingMapFigure) or 
					not (
							((u0) and (u1) and (u2) and (u3))
							and
							((v0) and (v1) and (v2) and (v3))
						)
				then
					local w,h=obj.getpixel()
					local color,a=obj.getpixel(w/2,h/2)
					col = color
					w,h,color,a=nil,nil,nil,nil
					obj.load("figure","四角形",col,1)
					u0,v0 = -1,-1
					u2,v2 = 1,1
					u1,v1 = u2,v0
					u3,v3 = u0,v2

				-- else
				-- 	if(mesh.isMapUsingRikkymodule) and (rikky_module) then
				-- 		rikky_module.image("r",mesh.imageStringId.."."..mesh.meshSetupLayer..":map")
				-- 		rikky_module.image("c",mesh.imageStringId.."."..mesh.meshSetupLayer..":map")
				-- 	else
				-- 		obj.copybuffer("obj","cache:"..mesh.imageStringId.."."..mesh.meshSetupLayer..":map")
				-- 	end
				end
			end
			if(mesh.isReflection==1) then
				if TDO and TDO["materials"] and TDO["materials"][obj.layer] and rikky_module then
					local material = rikky_module.materialdrawEx(TDO["materials"][obj.layer]) 
					material:drawpoly(
						x0,y0,z0,
						x1,y1,z1,
						x2,y2,z2,
						x2,y2,z2,
						u0,v0,
						u1,v1,
						u2,v2,
						u3,v3
					)
				elseif type(rikky_module)~="table" then
					obj.setfont("メイリオ",60)
					log("error: not found table'rikky_module'. at layer"..obj.layer)
					obj.load("3Dobject:\n反射(rikky)を使用するには、以下のスクリプト類が設定される必要があります。:\nrikky :\t\trikky_module;")
					mesh.iserror = true
				else
					obj.setfont("メイリオ",60)
					log("error: not found table 'TDO' . at layer"..obj.layer)
					obj.load("3Dobject:\n光源が設定されていません\nこのオブジェクトのレイヤーより上に光源を設定してください")
					mesh.iserror = true
				end
			else
				-- log("success")
				obj.drawpoly(
					x0,y0,z0,
					x1,y1,z1,
					x2,y2,z2,
					x2,y2,z2,
					u0,v0,
					u1,v1,
					u2,v2,
					u3,v3
				)
			end
		end
	end,

--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||--
	SetUp = function(n)
		local af,aftype,apr=mesh.Af, mesh.AfType, mesh.AppearType
		local tmp
		if(aftype=="delaytrack") then
			tmp={}
			for i=1,n do
				table.insert(
					tmp,
					af[math.floor(#af/n*i)]
					)
			end
		else
			tmp={}
			for i=1,n do
				table.insert(
					tmp,
					af
					)
			end
		end
		return tmp
	end,

--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||--
	Ap = function(t,n,af)
		local apr=mesh.AppearType or 3
		if(apr+1==t) then
			--log("AP: match")
			return af[n] and af[n] or 0
		else
			--log("AP: not match")
			return 1
		end
	end,
--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||--
	Material = function(s,a,b,o1,o2,dw,dh,x,y,lastuv)
		-- local type=mesh.materialTypel
		if not mesh.iserror then
			local isFig=mesh.isUsingMapFigure
			local imageid=mesh.imageStringId
			local isusingdll=mesh.isMapUsingRikkymodule
			local w,h
			if(isUsingMapFigure) or s==0 then
				-- return {-1,-1,1,-1,1,1,-1,1}
				return false
			elseif mesh.isReflection==0 then
			-- else
				if(isusingdll) then
					rikky_module.image("r",mesh.imageStringId.."."..mesh.meshSetupLayer..":map")
					rikky_module.image("c",mesh.imageStringId.."."..mesh.meshSetupLayer..":map")
				else
					obj.copybuffer("obj","cache:"..mesh.imageStringId.."."..mesh.meshSetupLayer..":map")
				end
				w,h=
					obj.w,obj.h

				if(s==2) then
					local c=math.max(a,b)
					a,b=a/c,b/c
					return {
						-w*a+w/2,-h*b, w*a,-h*b, w*a,h*b, -w*a+w/2,h*b
					}
				elseif(s==3) then
					if o1 then
						return {w,h, -w,h, -w,-h, w,-h}
					else
						return {-w,-h, w,-h, w,h, -w,h}
					end

				elseif(s==4) then
					if type(o2)==nil then
						if o1 then
							return {w,h, -w,h, -w,-h, w,-h}
						else
							return {-w,-h, w,-h, w,h, -w,h}
						end
					else
						if o2 then
							return {w,h, -w,h, -w,-h, w,-h}
						else
							return {-w,-h, w,-h, w,h, -w,h}
						end
					end

				elseif(s==5) and (dw and dh and x and y) then
					return {
						-w*dw+x,-h*dh+y,w*dw+x,-h*dh+y,w*dw+x,h*dh+y,-w*dw+x,h*dh+y
					}
				elseif(s==5) then
					lastuv = lastuv or {-1,-1,1,-1,1,1,-1,1}
					return lastuv
				else
					return {-w,-h, w,-h, w,h, -w,h}
				end
			else
				-- return {-1,-1,1,-1,1,1,-1,1}
				return false
			end
		else
			-- return {-1,-1,1,-1,1,1,-1,1}
			return false
		end
	end
--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||--
}
if(obj.check0==false) then
	obj.setfont("メイリオ",40)
	obj.load("3Dobject:\nsucceed load function")
	log("succeed to set function")
end






-------------------------------------------------------
@光源設置(3Dobjectの物とは別に単体で設定してください)
-------------------------------------------------------
--track0:光源度%,0,100,100
--track1:Damping,0,2000,40
--track2:幅角度,0,90,60
--track3:描画細度,1,100,40
--dialog:dialog,val="";
if not rikky_module then require("rikky_module") end
if rikky_module then
	local dialogs = {
		"Main*color",		0xffaaaa,	0,		0,
		"spot/direct",		"false",	0,		0,
		"BothSide",			"false",	0,		0
	}
	local maincol,isSpottype,isBothSide,damping = rikky_module.parameter(val, 1, dialogs)
	local maincolT = {RGB(maincol)}
	local af=obj.track0/100

	TDO = type(TDO)~="table" and {} or TDO
	TDO["lights"] = TDO["lights"] or {}
	TDO["lights"][obj.layer] = {
		damping=obj.track1,
		lightsetting={
			color={R=maincolT[1]*af, G=maincolT[2]*af, B=maincolT[3]*af},
			position=obj.layer,
			option = {
				type = isSpottype and "directlight" or "spotlight",
				degree = obj.track2,
				double = isBothSide,
				degree2 = obj.track2,
				texture = obj.layer,
				partition = obj.track3,
				width = obj.w,
				height = obj.h
			}
		}
	}
else
	obj.setfont("メイリオ",30)
	obj.load("rikky_moduleが認識されませんでした。\nmoduleを導入するか、位置を確認してください。")
end





-------------------------------------------------------
@反射設定(図形関数設定の直後に設定してください)
-------------------------------------------------------
--track0:影響度%,0,100,100
--track1:ﾊｲﾗｲﾄｼｬｰﾌﾟ,0,5000,300
--dialog:dialog,val="";
if not rikky_module then require("rikky_module") end
if rikky_module then
	local dialogs = {
		"Specular*color",	0xffffff,	0,		0,
		"Ambient*color",	0x000000,	0,		0,
		"Emissive*color",	0x000000,	0,		0,
		"Details",			"false",	0,		0,
		"└ Finess",			40,			20,		200
	}
	local specol,ambcol,emicol,isDetails,detailfiness = rikky_module.parameter(val, 1, dialogs)
	local specolT,ambcolT,emicolT={RGB(specol)}, {RGB(ambcol)}, {RGB(emicol)}
	local af=obj.track0/100

	if TDO and TDO["lights"] then
		local lights={}
		local damping={}
		for k,l in pairs(TDO["lights"]) do
			local setting = l.lightsetting
			setting.color.R, setting.color.G, setting.color.B 			=
				setting.color.R*af, setting.color.G*af, setting.color.B*af
			-- debug_print(setting.color.R)
				-- 0,0,0
			setting.specular 											= {}
			setting.specular.shininess									= obj.track1
			setting.specular.R, setting.specular.G, setting.specular.B 	=
				specolT[1]*af, specolT[2]*af, specolT[3]*af
				-- 0,0,0
			table.insert(lights,setting)

			table.insert(damping,l.damping)
			-- TDO["lights"][k]=nil
		end
		damping = math.max(unpack(damping))

		local init={
			ambient =	{R=ambcolT[1]*af, G=ambcolT[2]*af, B=ambcolT[3]*af},
			-- ambient={R=0,G=0,B=0},
			emissive =	{R=emicolT[1]*af, G=emicolT[2]*af, B=emicolT[3]*af},
			-- emissive={R=0,G=0,B=0},
			damping = damping,
			drawhq = isDetails,
			drawhq_partition = detailfiness,
			light = lights
		}

		TDO["materials"] = TDO["materials"] or {}
		TDO["materials"][obj.layer] = init
	else
		obj.setfont("メイリオ",20)
		obj.load("光源が設定されていません\nこのオブジェクトのレイヤーより上に光源を設定してください")
	end
else
	obj.setfont("メイリオ",30)
	obj.load("rikky_moduleが認識されませんでした。\nmoduleを導入するか、位置を確認してください。")
end





-------------------------------------------------------
@光源初期化(最初の光源で光源設定の前に必ず設定してください)
-------------------------------------------------------
--track0:透明化,0,1,0,1
--check0:メッセージ非表示,0
TDO=nil
if not obj.check0 and obj.track0==0 then
	obj.setfont("メイリオ",30)
	obj.load("初期化しました")
elseif obj.track0==1 then
	obj.alpha=0
end





-------------------------------------------------------
@立方体/直方体
-------------------------------------------------------
--track0:width,0,5000,100,0.01
--track1:height,0,5000,100,0.01
--track2:depth,0,5000,100,0.01
--track3:ログ表示,0,1,0,1
--dialog:
--check0:表示,0

local w,h,d,r = obj.track0,obj.track1,obj.track2,obj.track3
-- local rand = function(n) return obj.rand(math.min(w,h,d)/-2,math.max(w,h,d)/2,1,n)*r+1 end
local i,j,x0,y0,z0,x1,y1,z1,x,y,z,k,af,aftype,apr,tmp,a1,a2,a3,appear,uv,maxuv
local path=obj.getinfo("script_path")
local ox,oy,oz=obj.ox,obj.oy,obj.oz


if(r==1) then log("load make function 'mesh'") end
if(obj.check0) and (mesh) then

	af = mesh.SetUp(6)
	local ap=mesh.Ap
	maxuv=math.min(obj.w,obj.h)

	local type=mesh.materialType
	-- uv=mesh.Material(0)
	-------------------------
	if(r==1) then log("make cube") end
	for i=0,1 do
		if mesh.iserror then break end
		uv=mesh.Material(type,h,d,i==0)
		x = w/2 *(-1*i +(1-i)) --*rand(1+i)
		y0,z0=
			h/-2 *ap(2,1+i,af) *ap(1,1+i,af),
			d/-2 *ap(3,1+i,af) *ap(2,1+i,af)
		y1,z1=
			h/2 *ap(2,1+i,af) *ap(1,1+i,af),
			d/2 *ap(3,1+i,af) *ap(2,1+i,af)
		mesh.Rect(true,
				{
					x,	y0,	z0,
					x,	y1,	z0,
					x,	y1,	z1,
					x,	y0,	z1
				},uv
			)
	end

	for i=0,1 do
		if mesh.iserror then break end
		uv=mesh.Material(type,w,d,i==0)
		y = h/2 *(-1*i +(1-i)) --*rand(1+i)
		x0,z0=
			w/-2 *ap(1,3+i,af) *ap(3,1+i,af),
			d/-2 *ap(3,3+i,af) *ap(2,1+i,af)
		x1,z1=
			w/2 *ap(1,3+i,af) *ap(3,1+i,af),
			d/2	*ap(3,3+i,af) *ap(2,1+i,af)
		mesh.Rect(true,
				{
					x0, y, z0,
					x1, y, z0,
					x1, y, z1,
					x0, y, z1
				},uv
			)
	end

	for i=0,1 do
		if mesh.iserror then break end
		uv=mesh.Material(type,h,w,i==0)
		z = d/2 *(-1*i +(1-i)) --*rand(1+i)
		x0,y0=
			w/-2 *ap(1,5+i,af) *ap(3,1+i,af),
			h/-2 *ap(2,5+i,af) *ap(1,1+i,af)
		x1,y1=
			w/2 *ap(1,5+i,af) *ap(3,1+i,af),
			h/2 *ap(2,5+i,af) *ap(1,1+i,af)
		mesh.Rect(true,
				{
					x0, y1, z,
					x0, y0, z,
					x1, y0, z,
					x1, y1, z
				},uv
			)
	end
end
mesh=nil

-------------------------------------------------------
@球/多角体
-------------------------------------------------------
--track0:radius,0,10000,100,0.01
--track1:width%,0,300,100,0.01
--track2:height%,0,300,100,0.01
--track3:depth%,0,300,100,0.01
--dialog:分割数,local div=32;ログ表示/chk,local isDisplayLogs=0;ｶｯﾃｨﾝｸﾞ(縦)%,local cutting={{0,100}};
--check0:表示,0

local r,w,h,d = obj.track0*obj.getvalue("zoom")/100, obj.track1/100, obj.track2/100, obj.track3/100
local i,j,x0,y0,z0,x1,y1,z1,k,t0,t1,v0,v1,u0,u1,j0,j1,i0,i1,af,ap,dx,dy,dz,cutn,k,iscut,isputsurface,ct1,ct2
local dw,dh=obj.w,obj.h
local sin,cos=
	function(n) return math.sin(math.rad(n)) end,
	function(n) return math.cos(math.rad(n)) end
local pi,ang=math.pi,360/div
local uv
local ox,oy,oz=obj.ox,obj.oy,obj.oz

if(isDisplayLogs==1) then log("load make function 'mesh'") end
if(obj.check0) and (mesh) then
	af=mesh.SetUp(div)
	ap=
		--function(a,b,c) return 1 end
		mesh.Ap
	cutn=cutting and #cutting or 0

	if(isDisplayLogs==1) then log("make sphere") end
	obj.setoption('antialias',0)
	for i=1,div/2 do
		if mesh.iserror then break end

		i0,i1 = i-1,i
		y0,y1=
			cos(ang*2*i0),
			cos(ang*2*i1)
		v0,v1=
			dh*i0/div,
			dh*i1/div
		t0,t1=
			sin(ang*2*i0),
			sin(ang*2*i1)

		iscut = false
		isputsurface = false
		for k=1,cutn do
			if mesh.iserror then break end
			if(cutting[k][1]) and (cutting[k][2]) then
				ct1,ct2=
					cutting[k][1]/100/4,
					cutting[k][2]/100/4
				
				if
					((div*ct1>i) and (div*ct1<=i+1))
					or
					((div*ct2<i+1) and (div*ct2>=i))
				 then
					isputsurface = true
					-- log("i: "..i.."; madeSurface")
				end

				if(div*ct1<=i) and (div*ct2>=i) then
					-- log("index: "..i.."  "..(div*ct1).."; "..(div*ct2)..";  all:"..div.." made")
					iscut = true
					break
				else
					-- log("index: "..i.."  "..(div*ct1).."; "..(div*ct2)..";  all:"..div)
				end
			end
		end
		
		for j=1,div do
			if mesh.iserror then break end
			j0,j1=j-1,j
			x0,x1=
				cos(ang*j0),
				cos(ang*j1)
			z0,z1=
				sin(ang*j0),
				sin(ang*j1)
			u0,u1=
				dw*j0/div,
				dw*j1/div

			dx,dy,dz=
				ap(1,i,af),
				ap(2,i,af),
				ap(3,i,af)

			local type=mesh.materialType
			local uv=mesh.Material(type,w,h,(i%2)==0,(j%2)==0)


			if(iscut) then
				mesh.Rect(true,
					{
						x0*t0*r*w,							y0*r*h,												z0*t0*r*d,
						x1*t0*r*w*dx*dy +x0*t0*r*(1-dx)*dy,	y0*r*h,												z1*t0*r*d*dx*dy +z0*t0*r*(1-dx)*dy*d +z0*t0*r*(1-dz)*dz*dy*d,
						x1*t1*r*w*dx*dy +x0*t1*r*(1-dx)*dy,	y1*r*h*dy*dz +y0*r*(1-dy)*dz*h +y0*r*(1-dz)*dy*h,	z1*t1*r*d*dx*dy +z0*t1*r*(1-dx)*dy*d +z0*t0*r*(1-dz)*dz*dy*d,
						x0*t1*r*w,							y1*r*h*dy*dz +y0*r*(1-dy)*dz*h +y0*r*(1-dz)*dy*h,	z0*t1*r*d
					},uv
				)
			end
			if(isputsurface) then
				mesh.Tri(true,
					{	
						0,									y1*r*h,												0,
						x1*t1*r*w*dx*dy +x0*t1*r*(1-dx)*dy,	y1*r*h*dy*dz +y1*r*(1-dy)*dz*h +y1*r*(1-dz)*dy*h,	z1*t1*r*d*dx*dy +z0*t1*r*(1-dx)*dy*d +z0*t0*r*(1-dz)*dz*dy*d,
						x0*t1*r*w,							y1*r*h*dy*dz +y1*r*(1-dy)*dz*h +y1*r*(1-dz)*dy*h,	z0*t1*r*d
					},uv
				)
				-- log("drawed "..z0)
			end
		end
		
	end
	--log(dx)
end
mesh=nil

-------------------------------------------------------
@円錐/多角錐
-------------------------------------------------------
--track0:radius,0,1000,100,0.01
--track1:height,0,5000,200,0.01
--track2:width%,0,300,100,0.01
--track3:depth%,0,300,100,0.01
--dialog:分割数,local div=32;ログ表示/chk,local isDisplayLogs=0;
--check0:表示,0


local r,h,w,d = obj.track0*obj.getvalue("zoom")/100, obj.track1, obj.track2/100, obj.track3/100
local i,j,x0,y0,z0,x1,y1,z1,v0,v1,u0,u1,i0,i1,af,dx,dy,dz,sx,sy,sz
local dw,dh=obj.w,obj.h
local sin,cos=
	function(n) return math.sin(math.rad(n)) end,
	function(n) return math.cos(math.rad(n)) end
local pi,ang=math.pi,360/div

if(isDisplayLogs==1) then log("load make function 'mesh'") end
if(obj.check0) and (mesh) then
	af=mesh.SetUp(div)
	ap=mesh.Ap

	if(isDisplayLogs==1) then log("make cone/polygonalPyramid") end
	obj.setoption('antialias',0)
	for i=1,div do
		if mesh.iserror then break end
		dx,dy,dz=
			ap(1,i,af),
			ap(2,i,af),
			ap(3,i,af)

		sx,sy,sz=
			1-dx,
			1-dy,
			1-dz

		i0,i1 = i-1,i

		y0,y1=
			h/2,h/-2

		x0,x1=
			cos(ang*i0)*r*w*dz +cos(ang*i0)*r*5*sz *(1-i%2*2),
			cos(ang*i1)*r*w

		z0,z1=
			sin(ang*i0)*r*d*dz,
			sin(ang*i1)*r*d

		v0,v1=
			dh*i0/div,
			dh*i1/div

		local type=mesh.materialType
		local uv=mesh.Material(type,w,h,(i%2)==0)


		mesh.Tri(true,
			{
				(x0+x1)/2*sx*(1-i%2*2),	y1*dz,		(z0+z1)/2*sx*(1-i%2*2),
				x1*dy +x0*sy,			y0*dz,		z1*dy +z0*sy,
				x0,						y0*dz,		z0
			},uv
		)


		mesh.Tri(true,
			{
				x0*dz,			y0*dz +y0*sz,	z0*dz,
				x1*dy +x0*sy,	y0*dz +y0*sz,	z1*dy +z0*sy,
				0,				y0*dz +y0*sz,	0
			},uv
		)
		
	end
end
mesh=nil

-------------------------------------------------------
@円柱/多角柱
-------------------------------------------------------
--track0:radius,0,1000,100,0.01
--track1:height,0,5000,200,0.01
--track2:width%,0,300,100,0.01
--track3:depth%,0,300,100,0.01
--dialog:分割数,local div=32;ログ表示/chk,local isDisplayLogs=0;ライン幅,local line=0;扇%,local notdraw=100;
--check0:表示,0


local r,h,w,d = obj.track0*obj.getvalue("zoom")/100, obj.track1, obj.track2/100, obj.track3/100
local i,j,x0,y0,z0,x1,y1,z1,v0,v1,u0,u1,i0,i1,x2,z2,x3,z3,g,af,dx,dy,dz,af,r0,r1,uv
local dw,dh=obj.w,obj.h
local sin,cos=
	function(n) return math.sin(math.rad(n)) end,
	function(n) return math.cos(math.rad(n)) end
local pi,ang=math.pi,360/div

-- バージョン差の互換性追加
line = line and math.abs(line) or 0
notdraw = notdraw and notdraw/2+50 or 100


if(isDisplayLogs==1) then log("load make function 'mesh'") end
if(obj.check0) and (mesh) then
	af=mesh.SetUp(div)
	local type=mesh.materialType
	ap=
		--function(a,b,c) return 1 end
		mesh.Ap


	obj.ry = obj.ry-5
	--af = mesh.SetUp(div)
	if(isDisplayLogs==1) then log("make cylinder") end
	obj.setoption('antialias',0)
	for i=1,div do
		if mesh.iserror then break end
		dx,dy,dz=
			ap(1,i,af),
			ap(2,i,af),
			ap(3,i,af)

		i0,i1 = i-1,i

		y0,y1=
			h/2*dz,h/-2*dy*dz +h/2*(1-dy)

		x0,x1=
			cos(ang*i0)*r*w,
			cos(ang*i1)*r*w*(dx) +cos(ang*i0)*r*w*(1-dx)

		z0,z1=
			sin(ang*i0)*r*d,
			sin(ang*i1)*r*d*(dx) +sin(ang*i0)*r*(1-dx)

		v0,v1=
			dh*i0/div,
			dh*i1/div

		x2,x3=
			((line~=0) and (line<=r/2)) and cos(ang*i0)*(r-line)*w or 0,
			((line~=0) and (line<=r/2)) and cos(ang*i1)*(r-line)*w*(dx)+cos(ang*i0)*(r-line)*w*(1-dx) or 0

		z2,z3=
			((line~=0) and (line<=r/2)) and sin(ang*i0)*(r-line)*d or 0,
			((line~=0) and (line<=r/2)) and sin(ang*i1)*(r-line)*d*(dx)+sin(ang*i0)*(r-line)*d*(1-dx) or 0

		uv=mesh.Material(type,math.sqrt((x1-x0)^2+(z0-z1)^2),h,(i%2)==0)
		-- uv=mesh.Material(type,w,h,i==0)

		if(i<=div*notdraw/100) then
			mesh.Rect(true, --外側
				{
					x0*dz +x1*(1-dz),	y0,	z0+z1*(1-dz),
					x1*dy +x0*(1-dy),	y0,	z1*dy +z0*(1-dy),
					x1*dy +x0*(1-dy),	y1,	z1*dy +z0*(1-dy),
					x0,					y1,	z0
				},uv
			)
			if(line~=0) and (line<=r/2) then
				mesh.Rect(true, --内側
					{
						x2+x3*(1-dz),		y0,	z2+z3*(1-dz),
						x3*dy +x2*(1-dy),	y0,	z3*dy +z2*(1-dy),
						x3*dy +x2*(1-dy),	y1,	z3*dy +z2*(1-dy),
						x2,					y1,	z2
					},uv
				)
			end

			for j=0,1 do
					if(line~=0) and (line<=r/2) then
					mesh.Rect(true, --上下
						{
							x0,					y0*(1-2*j),	z0,
							x1*dy +x0*(1-dy),	y0*(1-2*j),	z1*dy +z0*(1-dy),
							x3*dy +x0*(1-dy),	y0*(1-2*j),	z3*dy +z0*(1-dy),
							x2*dy +x0*(1-dy),	y0*(1-2*j),	z2*dy +z0*(1-dy)
						},uv
					)
					else

						mesh.Tri(true, --line==0の場合の上下
							{
								x0,	y0*(1-2*j),	z0,
								x1,	y0*(1-2*j),	z1,
								0,	y0*(1-2*j),	0
							},uv
						)
					end
				

			end
		end
		if((i-1)<div*notdraw/100) and ((i)>=div*notdraw/100) or i==1 then
			mesh.Rect(true, --扇形の断面
				{
					x0,	y0,	z0,
					x2,	y0,	z2,
					x2,	y1,	z2,
					x0,	y1,	z0
				},uv
			)
		end
	end
end
mesh=nil

-------------------------------------------------------
@トーラス
-------------------------------------------------------
--track0:radius,0,1000,100,0.01
--track1:line%,0,100,20,0.01
--track2:width%,0,300,100,0.01
--track3:depth%,0,300,100,0.01
--dialog:height%,local h=100;横分割数,local div=64;縦分割数,local div2=16;ログ表示/chk,local isDisplayLogs=0;扇%,local notdraw=100;扇縦横逆転/chk,local isOpp=0;
--check0:表示,0

local r,w,d = obj.track0*obj.getvalue("zoom")/100, obj.track2/100, obj.track3/100
local l = obj.track1/100*r
local i,j,x0,y0,z0,x1,y1,z1,dy0,dy1,dx0,dx1,dz0,dz1,v0,v1,u0,u1,i0,i1,j0,j1,dx,dy,dz,af,ap
local dw,dh=obj.w,obj.h
local sin,cos=
	function(n) return math.sin(math.rad(n)) end,
	function(n) return math.cos(math.rad(n)) end
local pi,ang,ang2=math.pi,360/div,div2 and 360/div2 or 360/div

div2 = type(div2)=="number" and div2 or div

notdraw = notdraw and notdraw/2+50 or 100
local g

if(obj.check0) and (mesh) then
	af=mesh.SetUp(div)
	ap=
		--function(a,b,c) return 1 end
		mesh.Ap

	for i=1,div2 do
		if mesh.iserror then break end
		dy=
			ap(2,i,af)

		i0,i1=
			i-1,i

		y0,y1=
			sin(i0*ang2)*l,
			sin(i1*ang2)*l 

		dy0,dy1=
			cos(i0*ang2)*l,
			cos(i1*ang2)*l

		for j=1,div do
			dx,dz=
				ap(1,j,af),
				ap(3,j,af)

			j0,j1=
				j-1,j

			x0,x1=
				cos(j0*ang)*r,
				cos(j1*ang)*r*dx +cos(j0*ang)*r*(1-dx)

			dx0,dx1=
				cos(j0*ang),
				cos(j1*ang)*dx +cos(j0*ang)*(1-dx)

			z0,z1=
				sin(j0*ang)*r,
				sin(j1*ang)*r*dx +sin(j0*ang)*r*(1-dx)

			dz0,dz1=
				sin(j0*ang),
				sin(j1*ang)*dx +sin(j0*ang)*(1-dx)

			local type=mesh.materialType
			local uv=mesh.Material(type,w,d,(i%2)==0,(j%2)==0)

			g = isOpp==1 and i or j
			if((g<=div*notdraw/100) and (g>div-div*notdraw/100)) then
				mesh.Rect(true,
					{
						(x0+dx0*dy0)*w,		y0*h/100*dy +y1*h/100*(1-dy) +r*(i%2*2-1)*(1-dz),	(z0+dz0*dy0)*d,
						(x1+dx1*dy0)*w,		y0*h/100*dy +y1*h/100*(1-dy) +r*(i%2*2-1)*(1-dz),	(z1+dz1*dy0)*d,
						(x1+dx1*dy1)*w,		y1*h/100 +r*(i%2*2-1)*(1-dz),						(z1+dz1*dy1)*d,
						(x0+dx0*dy1)*w,		y1*h/100 +r*(i%2*2-1)*(1-dz),						(z0+dz0*dy1)*d
					},uv
				)
			end
			if
					((g-1<=div-div*notdraw/100) and (g>div-div*notdraw/100))
					or
					((g-1<=div*notdraw/100) and (g>div*notdraw/100))
			then
				if(notdraw~=100) then
					mesh.Tri(true,
						{
								(x0+dx0*dy0)*w*dx,		y0*h/100*dy +y1*h/100*(1-dy) +r*(i%2*2-1)*(1-dz),	(z0+dz0*dy0)*d*dx,
								(x0+dx0*dy1)*w*dx,		y1*h/100 +r*(i%2*2-1)*(1-dz),						(z0+dz0*dy1)*d*dx,
							(x0)*w,					0,													(z0)*d
						},uv
					)
				end
				--log("drawed")
			end
		end
	end
end
mesh=nil
