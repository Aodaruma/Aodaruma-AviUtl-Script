--[[
v1.2

前にAULモデリングを見かけて、いろいろと不便だなーと思ったので作成いたしました。
カスタムオブジェクト？なにそれおいしいんですかね


一応最初に図形関数設定を行わないと描画できない仕様となっております。(ほかのスクリプトとの競合を防ぐため)
また、これはまだ v1.2 ですので、これからどんどんと機能が追加されていきますのでこうご期待です。

また、機能の一部を使用するには、以下のスクリプトが必要になりますが、使用するかどうかは任意です。(入れていなくてもちゃんとエラーが表示されます。)

◆◆◆◆◆◆◆◆◆◆ 必要になるかもしれないスクリプト ◆◆◆◆◆◆◆◆◆
	「rikky_module v1.0以上」
		by rikky_mouse
	http://hazumurhythm.com/wev/

	「RikkyReflection」
		by Aodaruma
	https://drive.google.com/open?id=0B89FJpy3LWypOW5wNmlNVThRWFU

	「DelayMove」
		by 93
	https://www.dropbox.com/sh/u73uud29hcxlply/AABH9ZhzL1P1kX-bWrL4asdDa?dl=0&preview=%40DelayMove.anm

◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆

<<< 開発者の方へ >>>
図形関数設定でmeshというテーブルで描画関数が設定されます。

mesh.Rectで四角形、mesh.Triで三角形のポリゴン体が描画できます。
第一引数で色を設定しますが、trueにするとgetpixelで中心のピクセルの色を取得してくれます(平均値はまたmedia/figure判定で更新予定)
<<<<<<< >>>>>>>>>


◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆　色々とめんどくさいですが説明書:　◆◆◆◆◆◆◆◆◆◆◆◆◆◆
図形関数設定(必須):
	Affect%[track]:
		変形率を指定します。percent。

	AprType[track]:
		変形タイプを指定します。

	反射(rikky)[track(check 0 or 1)]:
		rikky氏の光源反射関数を使い光源反射を行います。
		rikky氏のdll、「rikky_module」、
		私のスクリプト、「RikkyReflection」、
		が必要です。
			=== 使用方法 ===
				1. RikkyReflectionを図形関数設定より上に設定します。
				2. RikkyReflectionの「格納を実行」のチェックを入れます。
				3. カメラ制御にシャドーを設定します。
				4. 図形関数設定の「反射(rikky)」の値を1にすると実行されます。
				5(任意). RikkyReflectionのダイアログを設定します。
			===============

	DelayTrackT[check]:
		93氏のスクリプト「DelayMove」の一つ「DelayTrackT」を使用して変形をずらすことができます。
		93氏のスクリプト「DelayMove」が必要です。check。
			=== 使用方法 ===
				1. DelayTrackTを図形関数設定より上に設定します。
				2. DelayTrackTの添え字を設定します。(そのまま設定しているなら変えなくても構いません。)
				3. DelayTrackTのトラック番号を指定します。
				4. 指定したトラックを動かすと、ずれて変形されます。
			===============

	DTT添え字:
		DelayTrackTに使用する添え字をここで指定します。string。

	DTTトラック[1-4]:
		DelayTrackTで使用するトラックバーを指定します。integer[1-4]。

	非表示[check]:
		ログ及び実行が成功したかのステータスを非表示にします。


立方体/直方体:
	width[track]:
		横幅を指定します。pixel。

	height[track]:
		縦幅を指定します。pixel。
	
	depth[track]:
		深幅を指定します。pixel。

	ログ表示[track(check 0 or 1)]:
		ログ表示アプリにおいてログを表示するか指定します。
	
	表示[check]:
		描画するかを指定します。


球/多角体:
	radius[track]:
		半径を指定します。pixel。

	width%[track]:
		横幅の倍率を指定します。percent。

	height%[track]:
		縦幅の倍率を指定します。percent。

	depth%[track]:
		深幅の倍率を指定します。percent。

	分割数[number / integer]:
		面体の分割数を指定します。整数(自然数)。

	ログ表示[check]:
		ログ表示アプリにおいてログを表示するか指定します。

	ｶｯﾃｨﾝｸﾞ(縦)%[table]:
		球を縦にカットすることができます。
		例:	{{0,100}}
		 		=  0%~100%を表示する。
			{{20,30}, {50,60}}
				=  20%~30% と 50%~60%　を表示する。

	表示[check]:
		描画するかを指定します。


円錐/多角錐:
	radius[track]:
		底面の半径を指定します。pixel。

	height[track]:
		縦幅を指定します。pixel。

	width%[track]:
		横幅の倍率を指定します。percent。

	depth%[track]:
		深幅の倍率を指定します。percent。

	分割数[number / integer]:
		面体の分割数を指定します。整数(自然数)。
		◆お得情報◆
			分割数を3や4などにすると、三角錐や四角錐などが出来上がります。

	ログ表示[check]:
		ログ表示アプリにおいてログを表示するか指定します。

	表示[check]:
		描画するかを指定します。


円柱/多角柱:
	radius[track]:
		底面の半径を指定します。pixel。

	height[track]:
		縦幅を指定します。pixel。

	width%[track]:
		横幅の倍率を指定します。percent。

	depth%[track]:
		深幅の倍率を指定します。percent。

	分割数[number / integer]:
		面体の分割数を指定します。整数(自然数)。

	ログ表示[check]:
		ログ表示アプリにおいてログを表示するか指定します。

	扇%[number]:
		扇型に描画する指定ができます。100%ですべて描画します。percent

	表示[check]:
		描画するかを指定します。


トーラス:
	radius[track]:
		底面の半径を指定します。pixel。

	height%[track]:
		トーラス幅を指定します。percent。

	width%[track]:
		横幅の倍率を指定します。percent。

	depth%[track]:
		深幅の倍率を指定します。percent。

	height%[track]:
		縦幅の倍率を指定します。percent。

	分割数[number / integer]:
		面体の分割数を指定します。整数(自然数)。

	ログ表示[check]:
		ログ表示アプリにおいてログを表示するか指定します。

	扇%[number]:
		扇型に描画する指定ができます。100%ですべて描画します。percent

	扇縦横逆転[check]:
		扇型に描画する指定を、縦に描画していくか横に描画していくかを指定することができます。

	表示[check]:
		描画するかを指定します。


まだまだ機能追加中...
◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆


一通りこのような感じです。
図形を用意して、その図形のサイズを1にして適応するととても軽いです。
また、図形の色の設定から自動的に色を抽出します。

現在の機能はここまでです。
何か質問、追加してほしい立体図形や機能があればお気軽にTwitterまでお申し付けくださいませ。

Developed by Aodaruma
Twitter: @Aodaruma_
LastEdit:20:58 2017/05/12

-----------------
version更新

v1.2 -
	光源反射機能を追加。
	球をカットする機能を追加。
	変形方法を追加。
	その他バグを修正。

v1.1 -
	二つ表示されてしまうバグを修正。
	トーラス型を追加。
	円柱、トーラス型に扇形機能を追加。

v1.0 -
	スクリプトを作成。
	直方体、球、円錐、円柱などを追加。


------------------


]]

-----------------------------------------------------
@図形関数設定(必須)
-----------------------------------------------------
--track0:Affect%,0,100,100,0.01
--track1:AprType,0,2,0,1
--track2:反射(rikky),0,1,0,1
--dialog:DelayTrackT/chk,local isUseDTT=0;DTT添え字,local dttStr="T";DTTトラック[1-4],local dttUseNum=1;
--check0:非表示,0
log = function(s) if(obj.getinfo("saving")==false) then debug_print(s) end end

if(obj.check0==false) then
	obj.setfont("メイリオ",40)
	obj.load("3Dobject:\nsuccess load function")
	log("successed to set function")
end

local af,aftype,i
isUseDTT = isUseDTT or 0
if(isUseDTT==1) and (DT) then
	if(type(DT[dttStr])=="table") then
		af = {}
		for i=1,#DT[dttStr] do
			table.insert(af,math.abs(DT[dttStr][i][dttUseNum])/100)
		end
		af["delay"] = dttDelayNum
		aftype = "delaytrack"
	else
		obj.setfont("メイリオ",40)
		obj.load("3Dobject:\n「DTT添え」字で該当するDelayTrackT\nのtableが存在しませんでした。\n添え字を再度確認してください。")
		log("error: not found table'DT'. at layer"..obj.layer)
		af = obj.track0/100
		aftype = "default"
	end
elseif(isUseDTT==1) and (type(DT)~="table") then
	obj.setfont("メイリオ",40)
	obj.load("3Dobject:\nDelayTrackTを使用するには、以下のスクリプト類が設定される必要があります。:\n93 :\t\tDelayMove -> DelayTrackT;")
	log("error: not found table'DT'. at layer"..obj.layer)
	af = obj.track0 and obj.track0/100 or 1
	aftype = "default"
else
	af = obj.track0 and obj.track0/100 or 1
	aftype = "default"
end

mesh={
	Af = af,
	AfType = aftype,
	AppearType = obj.track1 or 0,
	isReflection = obj.track2 and obj.track2 or 0,

	Rect = function(col,x0,y0,z0,x1,y1,z1,x2,y2,z2,x3,y3,z3)
		if(col==true) then
			local w,h=obj.getpixel()
			local color,a=obj.getpixel(w/2,h/2)
			col = color
			w,h,color,a=nil,nil,nil,nil
		end
		if(col~="texture") then
			obj.load("figure","四角形",col,1)
		end
		if(mesh.isReflection==1) then
			if(RR) and (RR[obj.layer]) and (rikky_module) then
				rikky_module.materialdraw_init(RR[obj.layer].data)
				rikky_module.materialdraw(
					x0,y0,z0,
					x1,y1,z1,
					x2,y2,z2,
					x3,y3,z3
				)
			else
				obj.setfont("メイリオ",60)
				log("error: not found table'RR' or table'rikky_module'. at layer"..obj.layer)
				obj.load("3Dobject:\n反射(rikky)を使用するには、以下のスクリプト類が設定される必要があります。:\nrikky :\t\trikky_module;\nAodaruma: \t\tRikkyReflection;")
			end
		else
			-- log("success")
			obj.drawpoly(
				x0,y0,z0,
				x1,y1,z1,
				x2,y2,z2,
				x3,y3,z3
			)
		end
	end,

	Tri = function(col,x0,y0,z0,x1,y1,z1,x2,y2,z2)
		if(col==true) then
			local w,h=obj.getpixel()
			local color,a=obj.getpixel(w/2,h/2)
			col = color
			w,h,color,a=nil,nil,nil,nil
		end
		if(col~="texture") then
			obj.load("figure","四角形",col,1)
		end
		if(mesh.isReflection==1) then
			if(RR) and (RR[obj.layer]) and (rikky_module) then
				rikky_module.materialdraw_init(RR[obj.layer].data)
				rikky_module.materialdraw(
					x0,y0,z0,
					x1,y1,z1,
					x2,y2,z2,
					x2,y2,z2
				)
			else
				obj.setfont("メイリオ",60)
				log("error: not found table'RR' or table'rikky_module'. at layer"..obj.layer)
				obj.load("反射(rikky)を使用するには、以下のスクリプト類が必要です:\nrikky :\t\trikky_module;\nAodaruma: \t\tRikkyReflection;")
			end
		else
			-- log("success")
			obj.drawpoly(
					x0,y0,z0,
					x1,y1,z1,
					x2,y2,z2,
					x2,y2,z2
				)
		end
	end,

	SetUp = function(n)
		local af,aftype,apr=mesh.Af, mesh.AfType, mesh.AppearType
		local tmp
		if(aftype=="delaytrack") then
			tmp={}
			for i=1,n do
				table.insert(
					tmp,
					af[math.floor(#af/n*i)]
					)
			end
		else
			tmp={}
			for i=1,n do
				table.insert(
					tmp,
					af
					)
			end
		end
		return tmp
	end,

	Ap = function(t,n,af)
		local apr=mesh.AppearType or 3
		if(apr+1==t) then
			--log("AP: match")
			return af[n] and af[n] or 0
		else
			--log("AP: not match")
			return 1
		end
	end
}







-------------------------------------------------------
@立方体/直方体
-------------------------------------------------------
--track0:width,0,5000,100,0.01
--track1:height,0,5000,100,0.01
--track2:depth,0,5000,100,0.01
--track3:ログ表示,0,1,1,1
--dialog:
--check0:表示,0

local w,h,d,r = obj.track0,obj.track1,obj.track2,obj.track3
-- local rand = function(n) return obj.rand(math.min(w,h,d)/-2,math.max(w,h,d)/2,1,n)*r+1 end
local i,j,x0,y0,z0,x1,y1,z1,x,y,z,k,af,aftype,apr,tmp,a1,a2,a3,appear
local path=obj.getinfo("script_path")


if(r==1) then log("load make function 'mesh'") end
if(obj.check0) and (mesh) then

	af = mesh.SetUp(6)
	local ap=mesh.Ap
	-------------------------

	if(r==1) then log("make cube") end
	for i=0,1 do
		x = w/2 *(-1*i +(1-i)) --*rand(1+i)
		y0,z0=
			h/-2 *ap(2,1+i,af) *ap(1,1+i,af),
			d/-2 *ap(3,1+i,af) *ap(2,1+i,af)
		y1,z1=
			h/2 *ap(2,1+i,af) *ap(1,1+i,af),
			d/2 *ap(3,1+i,af) *ap(2,1+i,af)
		mesh.Rect(true,
				x,	y0,	z0,
				x,	y1,	z0,
				x,	y1,	z1,
				x,	y0,	z1
			)
	end

	for i=0,1 do
		y = h/2 *(-1*i +(1-i)) --*rand(1+i)
		x0,z0=
			w/-2 *ap(1,3+i,af) *ap(3,1+i,af),
			d/-2 *ap(3,3+i,af) *ap(2,1+i,af)
		x1,z1=
			w/2 *ap(1,3+i,af) *ap(3,1+i,af),
			d/2	*ap(3,3+i,af) *ap(2,1+i,af)
		mesh.Rect(true,
				x0,y,z0,
				x1,y,z0,
				x1,y,z1,
				x0,y,z1
			)
	end
	for i=0,1 do
		z = d/2 *(-1*i +(1-i)) --*rand(1+i)
		x0,y0=
			w/-2 *ap(1,5+i,af) *ap(3,1+i,af),
			h/-2 *ap(2,5+i,af) *ap(1,1+i,af)
		x1,y1=
			w/2 *ap(1,5+i,af) *ap(3,1+i,af),
			h/2 *ap(2,5+i,af) *ap(1,1+i,af)
		mesh.Rect(true,
				x0,y0,z,
				x0,y1,z,
				x1,y1,z,
				x1,y0,z
			)
	end
end
mesh=nil

-------------------------------------------------------
@球/多角体
-------------------------------------------------------
--track0:radius,0,10000,100,0.01
--track1:width%,0,300,100,0.01
--track2:height%,0,300,100,0.01
--track3:depth%,0,300,100,0.01
--dialog:分割数,local div=32;ログ表示/chk,local isDisplayLogs=1;ｶｯﾃｨﾝｸﾞ(縦)%,local cutting={{0,100}};
--check0:表示,0

local r,w,h,d = obj.track0*obj.getvalue("zoom")/100, obj.track1/100, obj.track2/100, obj.track3/100
local i,j,x0,y0,z0,x1,y1,z1,k,t0,t1,v0,v1,u0,u1,j0,j1,i0,i1,af,ap,dx,dy,dz,cutn,k,iscut,isputsurface,ct1,ct2
local dw,dh=obj.w,obj.h
local sin,cos=
	function(n) return math.sin(math.rad(n)) end,
	function(n) return math.cos(math.rad(n)) end
local pi,ang=math.pi,360/div

if(isDisplayLogs==1) then log("load make function 'mesh'") end
if(obj.check0) and (mesh) then
	af=mesh.SetUp(div)
	ap=
		--function(a,b,c) return 1 end
		mesh.Ap
	cutn=cutting and #cutting or 0

	if(isDisplayLogs==1) then log("make sphere") end
	obj.setoption('antialias',0)
	for i=1,div/2 do
		

		i0,i1 = i-1,i
		y0,y1=
			cos(ang*2*i0),
			cos(ang*2*i1)
		v0,v1=
			dh*i0/div,
			dh*i1/div
		t0,t1=
			sin(ang*2*i0),
			sin(ang*2*i1)

		iscut = false
		isputsurface = false
		for k=1,cutn do
			if(cutting[k][1]) and (cutting[k][2]) then
				ct1,ct2=
					cutting[k][1]/100/4,
					cutting[k][2]/100/4
				
				if
					((div*ct1>i) and (div*ct1<=i+1))
					or
					((div*ct2<i+1) and (div*ct2>=i))
				 then
					isputsurface = true
					-- log("i: "..i.."; madeSurface")
				end

				if(div*ct1<=i) and (div*ct2>=i) then
					-- log("index: "..i.."  "..(div*ct1).."; "..(div*ct2)..";  all:"..div.." made")
					iscut = true
					break
				else
					-- log("index: "..i.."  "..(div*ct1).."; "..(div*ct2)..";  all:"..div)
				end
			end
		end
		
		for j=1,div do
			j0,j1=j-1,j
			x0,x1=
				cos(ang*j0),
				cos(ang*j1)
			z0,z1=
				sin(ang*j0),
				sin(ang*j1)
			u0,u1=
				dw*j0/div,
				dw*j1/div

			dx,dy,dz=
				ap(1,i,af),
				ap(2,i,af),
				ap(3,i,af)

			if(iscut) then
				mesh.Rect(true,
					x0*t0*r*w,							y0*r*h,												z0*t0*r*d,
					x1*t0*r*w*dx*dy +x0*t0*r*(1-dx)*dy,	y0*r*h,												z1*t0*r*d*dx*dy +z0*t0*r*(1-dx)*dy*d +z0*t0*r*(1-dz)*dz*dy*d,
					x1*t1*r*w*dx*dy +x0*t1*r*(1-dx)*dy,	y1*r*h*dy*dz +y0*r*(1-dy)*dz*h +y0*r*(1-dz)*dy*h,	z1*t1*r*d*dx*dy +z0*t1*r*(1-dx)*dy*d +z0*t0*r*(1-dz)*dz*dy*d,
					x0*t1*r*w,							y1*r*h*dy*dz +y0*r*(1-dy)*dz*h +y0*r*(1-dz)*dy*h,	z0*t1*r*d
				)
			end
			if(isputsurface) then
				mesh.Tri(true,
					0,									y1*r*h,												0,
					x1*t1*r*w*dx*dy +x0*t1*r*(1-dx)*dy,	y1*r*h*dy*dz +y1*r*(1-dy)*dz*h +y1*r*(1-dz)*dy*h,	z1*t1*r*d*dx*dy +z0*t1*r*(1-dx)*dy*d +z0*t0*r*(1-dz)*dz*dy*d,
					x0*t1*r*w,							y1*r*h*dy*dz +y1*r*(1-dy)*dz*h +y1*r*(1-dz)*dy*h,	z0*t1*r*d
				)
				-- log("drawed "..z0)
			end
		end
		
	end
	--log(dx)
end
mesh=nil

-------------------------------------------------------
@円錐/多角錐
-------------------------------------------------------
--track0:radius,0,1000,100,0.01
--track1:height,0,5000,200,0.01
--track2:width%,0,300,100,0.01
--track3:depth%,0,300,100,0.01
--dialog:分割数,local div=32;ログ表示/chk,local isDisplayLogs=1;
--check0:表示,0


local r,h,w,d = obj.track0*obj.getvalue("zoom")/100, obj.track1, obj.track2/100, obj.track3/100
local i,j,x0,y0,z0,x1,y1,z1,v0,v1,u0,u1,i0,i1,af,dx,dy,dz,sx,sy,sz
local dw,dh=obj.w,obj.h
local sin,cos=
	function(n) return math.sin(math.rad(n)) end,
	function(n) return math.cos(math.rad(n)) end
local pi,ang=math.pi,360/div

if(isDisplayLogs==1) then log("load make function 'mesh'") end
if(obj.check0) and (mesh) then
	af=mesh.SetUp(div)
	ap=mesh.Ap

	if(isDisplayLogs==1) then log("make cone/polygonalPyramid") end
	obj.setoption('antialias',0)
	for i=1,div do
		dx,dy,dz=
			ap(1,i,af),
			ap(2,i,af),
			ap(3,i,af)

		sx,sy,sz=
			1-dx,
			1-dy,
			1-dz

		i0,i1 = i-1,i

		y0,y1=
			h/2,h/-2

		x0,x1=
			cos(ang*i0)*r*w*dz +cos(ang*i0)*r*5*sz *(1-i%2*2),
			cos(ang*i1)*r*w

		z0,z1=
			sin(ang*i0)*r*d*dz,
			sin(ang*i1)*r*d

		v0,v1=
			dh*i0/div,
			dh*i1/div

		


		mesh.Tri(true,
			(x0+x1)/2*sx*(1-i%2*2),	y1*dz,		(z0+z1)/2*sx*(1-i%2*2),
			x1*dy +x0*sy,			y0*dz,		z1*dy +z0*sy,
			x0,						y0*dz,			z0
		)

		mesh.Tri(true,
			x0*dz,			y0*dz +y0*sz,	z0*dz,
			x1*dy +x0*sy,	y0*dz +y0*sz,	z1*dy +z0*sy,
			0,				y0*dz +y0*sz,	0
		)
		
	end
end
mesh=nil

-------------------------------------------------------
@円柱/多角柱
-------------------------------------------------------
--track0:radius,0,1000,100,0.01
--track1:height,0,5000,200,0.01
--track2:width%,0,300,100,0.01
--track3:depth%,0,300,100,0.01
--dialog:分割数,local div=32;ログ表示/chk,local isDisplayLogs=1;ライン幅,local line=0;扇%,local notdraw=100;
--check0:表示,0


local r,h,w,d = obj.track0*obj.getvalue("zoom")/100, obj.track1, obj.track2/100, obj.track3/100
local i,j,x0,y0,z0,x1,y1,z1,v0,v1,u0,u1,i0,i1,x2,z2,x3,z3,g,af,dx,dy,dz,af,r0,r1
local dw,dh=obj.w,obj.h
local sin,cos=
	function(n) return math.sin(math.rad(n)) end,
	function(n) return math.cos(math.rad(n)) end
local pi,ang=math.pi,360/div

-- バージョン差の互換性追加
line = line and math.abs(line) or 0
notdraw = notdraw and notdraw/2+50 or 100


if(isDisplayLogs==1) then log("load make function 'mesh'") end
if(obj.check0) and (mesh) then
	af=mesh.SetUp(div)
	ap=
		--function(a,b,c) return 1 end
		mesh.Ap

	obj.ry = obj.ry-5
	--af = mesh.SetUp(div)
	if(isDisplayLogs==1) then log("make cylinder") end
	obj.setoption('antialias',0)
	for i=1,div do
		dx,dy,dz=
			ap(1,i,af),
			ap(2,i,af),
			ap(3,i,af)

		i0,i1 = i-1,i

		y0,y1=
			h/2*dz,h/-2*dy*dz +h/2*(1-dy)

		x0,x1=
			cos(ang*i0)*r*w,
			cos(ang*i1)*r*w*(dx) +cos(ang*i0)*r*w*(1-dx)

		z0,z1=
			sin(ang*i0)*r*d,
			sin(ang*i1)*r*d*(dx) +sin(ang*i0)*r*(1-dx)

		v0,v1=
			dh*i0/div,
			dh*i1/div

		x2,x3=
			((line~=0) and (line<=r/2)) and cos(ang*i0)*(r-line)*w or 0,
			((line~=0) and (line<=r/2)) and cos(ang*i1)*(r-line)*w*(dx)+cos(ang*i0)*(r-line)*w*(1-dx) or 0

		z2,z3=
			((line~=0) and (line<=r/2)) and sin(ang*i0)*(r-line)*d or 0,
			((line~=0) and (line<=r/2)) and sin(ang*i1)*(r-line)*d*(dx)+sin(ang*i0)*(r-line)*d*(1-dx) or 0


		if(i<=div*notdraw/100) and (i>div-div*notdraw/100) then
			mesh.Rect(true,
				x0*dz +x1*(1-dz),	y0,	z0+z1*(1-dz),
				x1*dy +x0*(1-dy),	y0,	z1*dy +z0*(1-dy),
				x1*dy +x0*(1-dy),	y1,	z1*dy +z0*(1-dy),
				x0,					y1,	z0
			)
			if(line~=0) and (line<=r/2) then
				mesh.Rect(true,
					x2+x3*(1-dz),		y0,	z2+z3*(1-dz),
					x3*dy +x2*(1-dy),	y0,	z3*dy +z2*(1-dy),
					x3*dy +x2*(1-dy),	y1,	z3*dy +z2*(1-dy),
					x2,					y1,	z2
				)
			end
			if(i==1 and j==1) then
				mesh.Rect(true,
					x0,	y0,	z0,
					x2,	y0,	z2,
					x2,	y1,	z2,
					x0,	y1,	z0
				)
			end

			for j=0,1 do
					if(line~=0) and (line<=r/2) then
					mesh.Rect(true,
						x0,					y0*(1-2*j),	z0,
						x1*dy +x0*(1-dy),	y0*(1-2*j),	z1*dy +z0*(1-dy),
						x3*dy +x0*(1-dy),	y0*(1-2*j),	z3*dy +z0*(1-dy),
						x2*dy +x0*(1-dy),	y0*(1-2*j),	z2*dy +z0*(1-dy)
					)
					else
						mesh.Tri(true,
						x0,	y0*(1-2*j),	z0,
						x1,	y0*(1-2*j),	z1,
						0,	y0*(1-2*j),	0
					)
					end
				

			end
			
		elseif((i-1)<=div*notdraw/100) and (i>div-div*notdraw/100) then
			mesh.Rect(true,
					x0,	y0,	z0,
					x2,	y0,	z2,
					x2,	y1,	z2,
					x0,	y1,	z0
				)
		end
	end
end
mesh=nil

-------------------------------------------------------
@トーラス
-------------------------------------------------------
--track0:radius,0,1000,100,0.01
--track1:line%,0,100,20,0.01
--track2:width%,0,300,100,0.01
--track3:depth%,0,300,100,0.01
--dialog:height%,local h=100;横分割数,local div=64;縦分割数,local div2=16;ログ表示/chk,local isDisplayLogs=1;扇%,local notdraw=100;扇縦横逆転/chk,local isOpp=0;
--check0:表示,0

local r,w,d = obj.track0*obj.getvalue("zoom")/100, obj.track2/100, obj.track3/100
local l = obj.track1/100*r
local i,j,x0,y0,z0,x1,y1,z1,dy0,dy1,dx0,dx1,dz0,dz1,v0,v1,u0,u1,i0,i1,j0,j1,dx,dy,dz,af,ap
local dw,dh=obj.w,obj.h
local sin,cos=
	function(n) return math.sin(math.rad(n)) end,
	function(n) return math.cos(math.rad(n)) end
local pi,ang,ang2=math.pi,360/div,div2 and 360/div2 or 360/div

div2 = type(div2)=="number" and div2 or div

notdraw = notdraw and notdraw/2+50 or 100
local g

if(obj.check0) and (mesh) then
	af=mesh.SetUp(div)
	ap=
		--function(a,b,c) return 1 end
		mesh.Ap

	for i=1,div2 do
		dy=
			ap(2,i,af)

		i0,i1=
			i-1,i

		y0,y1=
			sin(i0*ang2)*l,
			sin(i1*ang2)*l 

		dy0,dy1=
			cos(i0*ang2)*l,
			cos(i1*ang2)*l

		for j=1,div do
			dx,dz=
				ap(1,j,af),
				ap(3,j,af)

			j0,j1=
				j-1,j

			x0,x1=
				cos(j0*ang)*r,
				cos(j1*ang)*r*dx +cos(j0*ang)*r*(1-dx)

			dx0,dx1=
				cos(j0*ang),
				cos(j1*ang)*dx +cos(j0*ang)*(1-dx)

			z0,z1=
				sin(j0*ang)*r,
				sin(j1*ang)*r*dx +sin(j0*ang)*r*(1-dx)

			dz0,dz1=
				sin(j0*ang),
				sin(j1*ang)*dx +sin(j0*ang)*(1-dx)

			g = isOpp==1 and i or j
			if((g<=div*notdraw/100) and (g>div-div*notdraw/100)) then
				mesh.Rect(true,
					(x0+dx0*dy0)*w,		y0*h/100*dy +y1*h/100*(1-dy) +r*(i%2*2-1)*(1-dz),	(z0+dz0*dy0)*d,
					(x1+dx1*dy0)*w,		y0*h/100*dy +y1*h/100*(1-dy) +r*(i%2*2-1)*(1-dz),	(z1+dz1*dy0)*d,
					(x1+dx1*dy1)*w,		y1*h/100 +r*(i%2*2-1)*(1-dz),						(z1+dz1*dy1)*d,
					(x0+dx0*dy1)*w,		y1*h/100 +r*(i%2*2-1)*(1-dz),						(z0+dz0*dy1)*d
				)
			end
			if
					((g-1<=div-div*notdraw/100) and (g>div-div*notdraw/100))
					or
					((g-1<=div*notdraw/100) and (g>div*notdraw/100))
			then
				if(notdraw~=100) then
					mesh.Tri(true,
						(x0+dx0*dy0)*w*dx,		y0*h/100*dy +y1*h/100*(1-dy) +r*(i%2*2-1)*(1-dz),	(z0+dz0*dy0)*d*dx,
						(x0+dx0*dy1)*w*dx,		y1*h/100 +r*(i%2*2-1)*(1-dz),						(z0+dz0*dy1)*d*dx,
						(x0)*w,					0,													(z0)*d
						)
				end
				--log("drawed")
			end
		end
	end
end
mesh=nil
