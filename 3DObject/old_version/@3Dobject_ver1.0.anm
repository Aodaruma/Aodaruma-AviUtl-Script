--[[

前にAULモデリングを見かけて、いろいろと不便だなーと思ったので作成いたしました。
ん、カスタムオブジェクト？なにそれおいしいんですかね


一応最初に図形関数設定を行わないと描画できない仕様となっております。(ほかのスクリプトとの競合を防ぐため)
また、これはまだ v1.0　ですので、これからどんどんと機能が追加されていきますのでこうご期待です。

<<< 開発者の方へ >>>
図形関数設定でmeshというテーブルで描画関数が設定されます。

mesh.Rectで四角形、mesh.Triで三角形のポリゴン体が描画できます。
第一引数で色を設定しますが、trueにするとgetpixelで中心のピクセルの色を取得してくれます(平均値はまたmedia/figure判定で更新予定)
<<<<<<< >>>>>>>>>


◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆　色々とめんどくさいですが説明書:　◆◆◆◆◆◆◆◆◆◆◆◆◆◆
@図形関数設定(必須):
	非表示[check]:	ログ及び実行が成功したかのステータスを非表示にします。


@立方体/直方体:
	width[track]:
		横幅を指定します。pixel。

	height[track]:
		縦幅を指定します。pixel。
	
	depth[track]:
		深幅を指定します。pixel。

	ログ表示[track(check 0 or 1)]:
		ログ表示アプリにおいてログを表示するか指定します。
	
	表示[check]:
		描画するかを指定します。


@球/多角体:
	radius[track]:
		半径を指定します。pixel。

	width%[track]:
		横幅の倍率を指定します。percent。

	height%[track]:
		縦幅の倍率を指定します。percent。

	depth%[track]:
		深幅の倍率を指定します。percent。

	分割数[number / integer]:
		面体の分割数を指定します。整数(自然数)。

	ログ表示[check]:
		ログ表示アプリにおいてログを表示するか指定します。

	表示[check]:
		描画するかを指定します。


@円錐/多角錐:
	radius[track]:
		底面の半径を指定します。pixel。

	height[track]:
		縦幅を指定します。pixel。

	width%[track]:
		横幅の倍率を指定します。percent。

	depth%[track]:
		深幅の倍率を指定します。percent。

	分割数[number / integer]:
		面体の分割数を指定します。整数(自然数)。
		◆お得情報◆
			分割数を3や4などにすると、三角錐や四角錐などが出来上がります。

	ログ表示[check]:
		ログ表示アプリにおいてログを表示するか指定します。

	表示[check]:
		描画するかを指定します。


@円柱/多角柱:
	radius[track]:
		底面の半径を指定します。pixel。

	height[track]:
		縦幅を指定します。pixel。

	width%[track]:
		横幅の倍率を指定します。percent。

	depth%[track]:
		深幅の倍率を指定します。percent。

	分割数[number / integer]:
		面体の分割数を指定します。整数(自然数)。

	ログ表示[check]:
		ログ表示アプリにおいてログを表示するか指定します。

	表示[check]:
		描画するかを指定します。


まだまだ機能追加中...
◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆


一通りこのような感じです。
図形を用意して、その図形のサイズを1にして適応するととても軽いです。
また、図形の色の設定から自動的に色を抽出します。

現在の機能はここまでです。
何か質問、追加してほしい立体図形や機能があればお気軽にTwitterまでお申し付けくださいませ。

Developed by Aodaruma
Twitter: @Aodaruma_
LastEdit:22:53 2017/04/17

-----------------
version更新

v1.0 -
	スクリプトを作成。
	直方体、球、円錐、円柱などを追加。


------------------


]]

-----------------------------------------------------
@図形関数設定(必須)
-----------------------------------------------------
--check0:非表示,0
log = function(s) if(obj.getinfo("saving")==false) then debug_print(s) end end
if(obj.check0==false) then
obj.setfont("メイリオ",40)
obj.load("3DObject:\nsuccess load function")
debug_print("successed to set function")
end
mesh={
	Rect = function(col,x0,y0,z0,x1,y1,z1,x2,y2,z2,x3,y3,z3)
		if(col==true) then
			local w,h=obj.getpixel()
			local color,a=obj.getpixel(w/2,h/2)
			col = color
			w,h,color,a=nil,nil,nil,nil
		end
		obj.load("figure","四角形",col,1)
		obj.drawpoly(
			x0,y0,z0,
			x1,y1,z1,
			x2,y2,z2,
			x3,y3,z3
		)
	end,

	Tri = function(col,x0,y0,z0,x1,y1,z1,x2,y2,z2)
		if(col==true) then
			local w,h=obj.getpixel()
			local color,a=obj.getpixel(w/2,h/2)
			col = color
			w,h,color,a=nil,nil,nil,nil
		end
		obj.load("figure","四角形",col,1)
		obj.drawpoly(
				x0,y0,z0,
				x1,y1,z1,
				x2,y2,z2,
				x2,y2,z2
			)
	end
}


-------------------------------------------------------
@立方体/直方体
-------------------------------------------------------
--track0:width,0,5000,100,0.01
--track1:height,0,5000,100,0.01
--track2:depth,0,5000,100,0.01
--track3:ログ表示,0,1,1,1
--dialog:
--check0:表示,0

local w,h,d,r = obj.track0,obj.track1,obj.track2,obj.track3
-- local rand = function(n) return obj.rand(math.min(w,h,d)/-2,math.max(w,h,d)/2,1,n)*r+1 end
local i,j,x0,y0,z0,x1,y1,z1,x,y,z,k
local path=obj.getinfo("script_path")

if(r==1) then log("load make function 'mesh'") end
if(obj.check0) and (mesh) then
	if(r==1) then log("make cube") end
	for i=0,1 do
		x = w/2 *(-1*i +(1-i)) --*rand(1+i)
		y0,z0=h/-2,d/-2
		y1,z1=h/2,d/2
		mesh.Rect(true,
				x,y0,z0,
				x,y1,z0,
				x,y1,z1,
				x,y0,z1
			)
	end

	for i=0,1 do
		y = h/2 *(-1*i +(1-i)) --*rand(1+i)
		x0,z0=w/-2,d/-2
		x1,z1=w/2,d/2
		mesh.Rect(true,
				x0,y,z0,
				x1,y,z0,
				x1,y,z1,
				x0,y,z1
			)
	end
	for i=0,1 do
		z = d/2 *(-1*i +(1-i)) --*rand(1+i)
		x0,y0=w/-2,h/-2
		x1,y1=w/2,h/2
		mesh.Rect(true,
				x0,y0,z,
				x0,y1,z,
				x1,y1,z,
				x1,y0,z
			)
	end
end
mesh=nil

-------------------------------------------------------
@球/多角体
-------------------------------------------------------
--track0:radius,0,10000,100,0.01
--track1:width%,0,300,100,0.01
--track2:height%,0,300,100,0.01
--track3:depth%,0,300,100,0.01
--dialog:分割数,local div=32;ログ表示/chk,local isDisplayLogs=1;
--check0:表示,0

local r,w,h,d = obj.track0*obj.getvalue("zoom")/100, obj.track1/100, obj.track2/100, obj.track3/100
local i,j,x0,y0,z0,x1,y1,z1,k,t0,t1,v0,v1,u0,u1,j0,j1,i0,i1
local dw,dh=obj.w,obj.h
local sin,cos=
	function(n) return math.sin(math.rad(n)) end,
	function(n) return math.cos(math.rad(n)) end
local pi,ang=math.pi,360/div

if(isDisplayLogs==1) then log("load make function 'mesh'") end
if(obj.check0) and (mesh) then
	if(isDisplayLogs==1) then log("make sphere") end
	obj.setoption('antialias',0)
	for i=1,div do
		i0,i1 = i-1,i
		y0,y1=
			cos(ang*2*i0),
			cos(ang*2*i1)
		v0,v1=
			dh*i0/div,
			dh*i1/div
		t0,t1=
			sin(ang*2*i0),
			sin(ang*2*i1)

		for j=1,div do
			j0,j1=j-1,j
			x0,x1=
				cos(ang*j0),
				cos(ang*j1)
			z0,z1=
				sin(ang*j0),
				sin(ang*j1)
			u0,u1=
				dw*j0/div,
				dw*j1/div

			mesh.Rect(true,
				x0*t0*r*w,	y0*r*h,		z0*t0*r*d,
				x1*t0*r*w,	y0*r*h,		z1*t0*r*d,
				x1*t1*r*w,	y1*r*h,		z1*t1*r*d,
				x0*t1*r*w,	y1*r*h,		z0*t1*r*d
			)
		end
	end
end
mesh=nil

-------------------------------------------------------
@円錐/多角錐
-------------------------------------------------------
--track0:radius,0,1000,100,0.01
--track1:height,0,5000,200,0.01
--track2:width%,0,300,100,0.01
--track3:depth%,0,300,100,0.01
--dialog:分割数,local div=32;ログ表示/chk,local isDisplayLogs=1;
--check0:表示,0


local r,h,w,d = obj.track0*obj.getvalue("zoom")/100, obj.track1, obj.track2/100, obj.track3/100
local i,j,x0,y0,z0,x1,y1,z1,v0,v1,u0,u1,i0,i1
local dw,dh=obj.w,obj.h
local sin,cos=
	function(n) return math.sin(math.rad(n)) end,
	function(n) return math.cos(math.rad(n)) end
local pi,ang=math.pi,360/div

if(isDisplayLogs==1) then log("load make function 'mesh'") end
if(obj.check0) and (mesh) then
	if(isDisplayLogs==1) then log("make cone/polygonalPyramid") end
	obj.setoption('antialias',0)
	for i=1,div do
		i0,i1 = i-1,i

		y0,y1=
			h/2,h/-2

		x0,x1=
			cos(ang*i0)*r*w,
			cos(ang*i1)*r*w

		z0,z1=
			sin(ang*i0)*r*d,
			sin(ang*i1)*r*d

		v0,v1=
			dh*i0/div,
			dh*i1/div

		mesh.Tri(true,
			0,	y1,	0,
			x1,	y0,	z1,
			x0,	y0,	z0
		)

		mesh.Tri(true,
			x0,	y0,	z0,
			x1,	y0,	z1,
			0,	y0,	0
		)
		
	end
end
mesh=nil

-------------------------------------------------------
@円柱/多角柱
-------------------------------------------------------
--track0:radius,0,1000,100,0.01
--track1:height,0,5000,200,0.01
--track2:width%,0,300,100,0.01
--track3:depth%,0,300,100,0.01
--dialog:分割数,local div=32;ログ表示/chk,local isDisplayLogs=1;
--check0:表示,0


local r,h,w,d = obj.track0*obj.getvalue("zoom")/100, obj.track1, obj.track2/100, obj.track3/100
local i,j,x0,y0,z0,x1,y1,z1,v0,v1,u0,u1,i0,i1
local dw,dh=obj.w,obj.h
local sin,cos=
	function(n) return math.sin(math.rad(n)) end,
	function(n) return math.cos(math.rad(n)) end
local pi,ang=math.pi,360/div

if(isDisplayLogs==1) then log("load make function 'mesh'") end
if(obj.check0) and (mesh) then
	if(isDisplayLogs==1) then log("make cylinder") end
	obj.setoption('antialias',0)
	for i=1,div do
		i0,i1 = i-1,i

		y0,y1=
			h/2,h/-2

		x0,x1=
			cos(ang*i0)*r*w,
			cos(ang*i1)*r*w

		z0,z1=
			sin(ang*i0)*r*d,
			sin(ang*i1)*r*d

		v0,v1=
			dh*i0/div,
			dh*i1/div

		mesh.Rect(true,
			x0,	y0,	z0,
			x1,	y0,	z1,
			x1,	y1,	z1,
			x0,	y1,	z0
		)

		for j=0,1 do
			mesh.Tri(true,
				x0,	y0*(1-2*j),	z0,
				x1,	y0*(1-2*j),	z1,
				0,	y0*(1-2*j),	0
			)
		end
		
	end
end
mesh=nil